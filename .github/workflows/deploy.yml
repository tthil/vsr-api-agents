name: VSR API Deployment Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install -r worker/requirements.txt
          pip install -r shared/requirements.txt

      - name: Wait for services
        run: |
          # Wait for MongoDB
          timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          # Wait for RabbitMQ
          timeout 60 bash -c 'until nc -z localhost 5672; do sleep 1; done'
          # Wait for Redis
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
          # Wait for MinIO
          timeout 60 bash -c 'until nc -z localhost 9000; do sleep 1; done'

      - name: Setup test environment
        run: |
          # Create MinIO bucket for testing
          pip install minio
          python -c "
          from minio import Minio
          client = Minio('localhost:9000', access_key='minioadmin', secret_key='minioadmin', secure=False)
          if not client.bucket_exists('vsr-test'):
              client.make_bucket('vsr-test')
          "

      - name: Run API tests
        env:
          VSR_DB_HOST: localhost
          VSR_DB_PORT: 27017
          VSR_DB_USERNAME: root
          VSR_DB_PASSWORD: example
          VSR_DB_NAME: vsr_test
          VSR_RABBITMQ_HOST: localhost
          VSR_RABBITMQ_PORT: 5672
          VSR_RABBITMQ_USERNAME: admin
          VSR_RABBITMQ_PASSWORD: password
          VSR_REDIS_HOST: localhost
          VSR_REDIS_PORT: 6379
          VSR_SPACES_ENDPOINT: http://localhost:9000
          VSR_SPACES_ACCESS_KEY: minioadmin
          VSR_SPACES_SECRET_KEY: minioadmin
          VSR_SPACES_BUCKET: vsr-test
          VSR_API_KEYS: test-key-1,test-key-2
        run: |
          cd api
          python -m pytest tests/ -v --cov=vsr_api --cov-report=xml --cov-report=term

      - name: Run worker tests
        env:
          VSR_DB_HOST: localhost
          VSR_DB_PORT: 27017
          VSR_DB_USERNAME: root
          VSR_DB_PASSWORD: example
          VSR_DB_NAME: vsr_test
          VSR_RABBITMQ_HOST: localhost
          VSR_RABBITMQ_PORT: 5672
          VSR_RABBITMQ_USERNAME: admin
          VSR_RABBITMQ_PASSWORD: password
          VSR_SPACES_ENDPOINT: http://localhost:9000
          VSR_SPACES_ACCESS_KEY: minioadmin
          VSR_SPACES_SECRET_KEY: minioadmin
          VSR_SPACES_BUCKET: vsr-test
        run: |
          cd worker
          python -m pytest tests/ -v --cov=vsr_worker --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml,./worker/coverage.xml
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r api/ worker/ shared/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      worker-image: ${{ steps.meta-worker.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      worker-digest: ${{ steps.build-worker.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract Worker metadata
        id: meta-worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Worker image
        id: build-worker
        uses: docker/build-push-action@v5
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deployment dependencies
        run: |
          pip install -r scripts/requirements.txt

      - name: Deploy to staging
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN_STAGING }}
          VSR_DOMAIN: ${{ secrets.VSR_DOMAIN_STAGING }}
          VSR_SSL_EMAIL: ${{ secrets.VSR_SSL_EMAIL }}
          VSR_SPACES_ACCESS_KEY: ${{ secrets.VSR_SPACES_ACCESS_KEY_STAGING }}
          VSR_SPACES_SECRET_KEY: ${{ secrets.VSR_SPACES_SECRET_KEY_STAGING }}
          VSR_SPACES_BUCKET: ${{ secrets.VSR_SPACES_BUCKET_STAGING }}
          VSR_GRAFANA_PASSWORD: ${{ secrets.VSR_GRAFANA_PASSWORD_STAGING }}
        run: |
          python scripts/deploy.py --config deployment/config.staging.yml --action deploy

      - name: Run smoke tests
        env:
          API_BASE_URL: https://${{ secrets.VSR_DOMAIN_STAGING }}
          API_KEY: ${{ secrets.VSR_API_KEY_STAGING }}
        run: |
          python scripts/smoke_tests.py

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install deployment dependencies
        run: |
          pip install -r scripts/requirements.txt

      - name: Deploy to production
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          VSR_DOMAIN: ${{ secrets.VSR_DOMAIN }}
          VSR_SSL_EMAIL: ${{ secrets.VSR_SSL_EMAIL }}
          VSR_SPACES_ACCESS_KEY: ${{ secrets.VSR_SPACES_ACCESS_KEY }}
          VSR_SPACES_SECRET_KEY: ${{ secrets.VSR_SPACES_SECRET_KEY }}
          VSR_SPACES_BUCKET: ${{ secrets.VSR_SPACES_BUCKET }}
          VSR_GRAFANA_PASSWORD: ${{ secrets.VSR_GRAFANA_PASSWORD }}
        run: |
          python scripts/deploy.py --config deployment/config.yml --action deploy

      - name: Run production health checks
        env:
          API_BASE_URL: https://${{ secrets.VSR_DOMAIN }}
          API_KEY: ${{ secrets.VSR_API_KEY }}
        run: |
          python scripts/health_check.py --comprehensive

      - name: Update deployment status
        if: success()
        run: |
          echo "Production deployment successful at $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure
        if: failure()
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
        run: |
          python scripts/deploy.py --config deployment/config.yml --action rollback --deployment-id ${{ github.sha }}

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
