name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd shared && pip install -e ".[dev]"
          cd ../api && pip install -e ".[dev]"
          cd ../worker && pip install -e ".[dev]"
      
      - name: Lint with ruff
        run: ruff check .
      
      - name: Check formatting with black
        run: black --check .
      
      - name: Check imports with isort
        run: isort --check .
      
      - name: Type check with mypy
        run: cd shared && mypy vsr_shared

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.11"]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
      
      rabbitmq:
        image: rabbitmq:3.12
        ports:
          - 5672:5672
      
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --name=minio
          --health-cmd="curl -f http://localhost:9000/minio/health/live"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --health-start-period=5s
          --entrypoint sh
        volumes:
          - /tmp:/data
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd shared && pip install -e ".[dev]"
          cd ../api && pip install -e ".[dev]"
          cd ../worker && pip install -e ".[dev]"
      
      - name: Set up MinIO bucket
        run: |
          pip install minio
          python -c "from minio import Minio; client = Minio('localhost:9000', access_key='minioadmin', secret_key='minioadmin', secure=False); client.make_bucket('vsr-videos')"
      
      - name: Test API
        run: cd api && pytest -xvs
        env:
          MONGODB_URL: mongodb://localhost:27017/vsr-test
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          SPACES_ENDPOINT: http://localhost:9000
          SPACES_REGION: us-east-1
          SPACES_KEY: minioadmin
          SPACES_SECRET: minioadmin
          SPACES_BUCKET: vsr-videos
      
      - name: Test Worker
        run: cd worker && pytest -xvs
        env:
          MONGODB_URL: mongodb://localhost:27017/vsr-test
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/
          SPACES_ENDPOINT: http://localhost:9000
          SPACES_REGION: us-east-1
          SPACES_KEY: minioadmin
          SPACES_SECRET: minioadmin
          SPACES_BUCKET: vsr-videos

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/api.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/vsr-api:latest,${{ secrets.DOCKER_REGISTRY }}/vsr-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/vsr-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/vsr-api:buildcache,mode=max
      
      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/worker.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/vsr-worker:latest,${{ secrets.DOCKER_REGISTRY }}/vsr-worker:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/vsr-worker:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/vsr-worker:buildcache,mode=max
